(ns sicp-practice.ex-2-42
  (:use sicp-practice.ex-2-40)
  (:use clojure.contrib.str-utils))

;; 先週も終わり際に解説しましたが、問題2.40でenumerate-intervalが2重にネストしている場合、問題2.41で3重にネストしている場合の問題でした
;; 問題2.42では8queenの場合なら8重にネスト...という感じになるのですが、何十にネストするかは事前には与えられないというような問題です(まぁ、流れから再帰するしかねぇだろjkというのが分かります)
;; 問題2.40 -> 問題2.41 -> 問題2.42と段々抽象的になっていっていることが分かりますね

;; see also https://github.com/sicp/ikoma-sicp/blob/master/syou6162/sicp-practice/test/sicp_practice/test/ex_2_42.clj

(defn x-axis [cell] (second cell)) ; 列に対応
(defn y-axis [cell] (first cell)) ; 行に対応

(def empty-board '(()))

(defn adjoin-position [row col rest]
  (cons (list row col) rest))

(defn diagonal? [a b]
  (let [dx (Math/abs (- (x-axis a) (x-axis b)))
        dy (Math/abs (- (y-axis a) (y-axis b)))]
    (= dx dy)))

(defn conflicts? [a b]
  (or (= (x-axis a) (x-axis b)) ; 列が等しい
      (= (y-axis a) (y-axis b)) ; 行が等しい
      (diagonal? a b)))

;; 引数"k"はあんまり関係ないっぽくて(kを使うと賢くできるっぽいけど、ここではさぼって愚直に...)、kthが今追加しようとしているcell
;; restを見ていってどれもconflicts?しないか見にいく(総当たりで見に行くので時間がかかりますわな...)
;; 空リストだったら問題なく追加できる
;; positionsにはこんなリストが入ってきます => ((3 4) (1 3) (4 2) (2 1))

(defn safe? [_ positions]
  (let [kth (first positions)
	my-rest (rest positions)]
    (if (empty? my-rest) true
	(every? #(not (conflicts? % kth)) my-rest))))

;; every?は組込み関数。中身としてはこんなイメージ。falseにつき当たるまでandを取り続ける
;; (defn my-every? [pred coll]
;;   (cond
;;    (empty? coll) true
;;    (pred (first coll)) (and true (my-every? pred (rest coll)))
;;    ;; どれか一個でもfalseがあったら再帰終了
;;    :else false))

;; (my-every? even? '(2 4 6)) ; true
;; (my-every? even? '(1 2 3)) ; false

;; もちろん、every?を使わず愚直に再帰していくこともできる
;; (defn safe? [k positions]
;;   (let [kth (first positions)]
;;     (letfn [(iter [my-rest]
;; 		  (cond (empty? my-rest) true
;; 			(conflicts? (first my-rest) kth) false
;; 			:else (iter (rest my-rest))))]
;;       (iter (rest positions)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 本体

;; queensの概要
;; 基本的には盤に置きうる場合を全部列挙してから、conflicts?しているかでfilterしていくという感じになっています
;; filterのpred部分の(fn [positions] (safe? k positions))をidentityに書き換えてみると
;; (map #(count (queens %)) (range 1 6)) => (1 4 27 256 3125)
;; となっていて、n^n個の番目の取り方を列挙していることが分かります
;; なぜなら1列目ではn通り、そのn通りに対して2列目でもn通り...n列目でもn通り => n * n * ... * n => n^n通りだからです
;; 本当は列毎に可能かどうかでfilteringしているんだけど、まぁ説明ということで...

;; queen-colsの概要
;; queen-colsは再帰になっていて、nから再帰で潜っていって、0になったら戻っていくという感じになっています(フィボナッチと同じ)
;; 
;; rest-of-queensはk-1列目までpossible solutionsが入ってるものです
;; これにk列目の1行目、2行目、...、n行目を追加していったものに対してsafe?でfilterしたものがqueen-colsで返ってきます

;; 再帰で潜って返ってくるところの説明

;; n列目まで追加した場合を列挙するためには、n-1行目までのpossible solutionsに対して、以下の中からsafe?なもの追加すればよい
;;  - n列目の1行目に置いたもの
;;  - ...
;;  - n列目のn行目に置いたもの
;; 
;; n-1列目まで追加した場合を列挙するためには、n-2行目までのpossible solutionsに対して、以下の中からsafe?なもの追加すればよい
;;  - n-1列目の1行目に置いたもの
;;  - ...
;;  - n-1列目のn行目に置いたもの
;;
;; ...
;; 2列目まで追加した場合を列挙するためには、1行目までのpossible solutionsに対して、以下の中からsafe?なもの追加すればよい
;;  - 1列目の1行目に置いたもの
;;  - ...
;;  - 1列目のn行目に置いたもの
;;
;; 1列目まで追加した場合を列挙するためには、0行目までのpossible solutionsに対して、以下の中からsafe?なもの追加すればよい
;;  - 0列目の1行目に置いたもの
;;  - ...
;;  - 0列目のn行目に置いたもの

(defn queens [board-size]
  (letfn [(queen-cols
	   [k]
	   (if (= k 0)
	     empty-board
	     (filter
	      (fn [positions] (safe? k positions))
	      (flatmap
	       (fn [rest-of-queens]
		 (map (fn [new-row]
			(adjoin-position new-row k rest-of-queens))
		      (enumerate-interval 1 board-size)))
	       (queen-cols (- k 1))))))]
    (queen-cols board-size)))

;; こんな感じで回答が当ってるか見るための関数
;; (println (queen-to-str (first (queens 4))))
;; --*-
;; *---
;; ---*
;; -*--

(defn queen-to-str [queen]
  (let [n (count queen)]
    (str-join
     "\n"
     (for [i (range 1 (inc n))]
       (str-join
	""
	(for [j (range 1 (inc n))]
	  (if (some #(= (list i j) %) queen) "*" "-")))))))

(queens 1) ; (((1 1)))
(queens 2) ; ()
(queens 3) ; ()
(queens 4) ; (((3 4) (1 3) (4 2) (2 1)) ((2 4) (4 3) (1 2) (3 1)))
(queens 5) ; (((4 5) (2 4) (5 3) (3 2) (1 1)) ((3 5) (5 4) (2 3) (4 2) (1 1)) ((5 5) (3 4) (1 3) (4 2) (2 1)) ((4 5) (1 4) (3 3) (5 2) (2 1)) ((5 5) (2 4) (4 3) (1 2) (3 1)) ((1 5) (4 4) (2 3) (5 2) (3 1)) ((2 5) (5 4) (3 3) (1 2) (4 1)) ((1 5) (3 4) (5 3) (2 2) (4 1)) ((3 5) (1 4) (4 3) (2 2) (5 1)) ((2 5) (4 4) (1 3) (3 2) (5 1)))
(queens 6) ; (((5 6) (3 5) (1 4) (6 3) (4 2) (2 1)) ((4 6) (1 5) (5 4) (2 3) (6 2) (3 1)) ((3 6) (6 5) (2 4) (5 3) (1 2) (4 1)) ((2 6) (4 5) (6 4) (1 3) (3 2) (5 1)))
(queens 7) ; (((6 7) (4 6) (2 5) (7 4) (5 3) (3 2) (1 1)) ((5 7) (2 6) (6 5) (3 4) (7 3) (4 2) (1 1)) ((4 7) (7 6) (3 5) (6 4) (2 3) (5 2) (1 1)) ((3 7) (5 6) (7 5) (2 4) (4 3) (6 2) (1 1)) ((6 7) (3 6) (5 5) (7 4) (1 3) (4 2) (2 1)) ((7 7) (5 6) (3 5) (1 4) (6 3) (4 2) (2 1)) ((6 7) (3 6) (7 5) (4 4) (1 3) (5 2) (2 1)) ((6 7) (4 6) (7 5) (1 4) (3 3) (5 2) (2 1)) ((6 7) (3 6) (1 5) (4 4) (7 3) (5 2) (2 1)) ((5 7) (1 6) (4 5) (7 4) (3 3) (6 2) (2 1)) ((4 7) (6 6) (1 5) (3 4) (5 3) (7 2) (2 1)) ((4 7) (7 6) (5 5) (2 4) (6 3) (1 2) (3 1)) ((5 7) (7 6) (2 5) (4 4) (6 3) (1 2) (3 1)) ((1 7) (6 6) (4 5) (2 4) (7 3) (5 2) (3 1)) ((7 7) (4 6) (1 5) (5 4) (2 3) (6 2) (3 1)) ((5 7) (1 6) (6 5) (4 4) (2 3) (7 2) (3 1)) ((6 7) (2 6) (5 5) (1 4) (4 3) (7 2) (3 1)) ((5 7) (7 6) (2 5) (6 4) (3 3) (1 2) (4 1)) ((7 7) (3 6) (6 5) (2 4) (5 3) (1 2) (4 1)) ((6 7) (1 6) (3 5) (5 4) (7 3) (2 2) (4 1)) ((2 7) (7 6) (5 5) (3 4) (1 3) (6 2) (4 1)) ((1 7) (5 6) (2 5) (6 4) (3 3) (7 2) (4 1)) ((3 7) (1 6) (6 5) (2 4) (5 3) (7 2) (4 1)) ((2 7) (6 6) (3 5) (7 4) (4 3) (1 2) (5 1)) ((3 7) (7 6) (2 5) (4 4) (6 3) (1 2) (5 1)) ((1 7) (4 6) (7 5) (3 4) (6 3) (2 2) (5 1)) ((7 7) (2 6) (4 5) (6 4) (1 3) (3 2) (5 1)) ((3 7) (1 6) (6 5) (4 4) (2 3) (7 2) (5 1)) ((4 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1)) ((4 7) (2 6) (7 5) (5 4) (3 3) (1 2) (6 1)) ((3 7) (7 6) (4 5) (1 4) (5 3) (2 2) (6 1)) ((2 7) (5 6) (7 5) (4 4) (1 3) (3 2) (6 1)) ((2 7) (4 6) (1 5) (7 4) (5 3) (3 2) (6 1)) ((2 7) (5 6) (1 5) (4 4) (7 3) (3 2) (6 1)) ((1 7) (3 6) (5 5) (7 4) (2 3) (4 2) (6 1)) ((2 7) (5 6) (3 5) (1 4) (7 3) (4 2) (6 1)) ((5 7) (3 6) (1 5) (6 4) (4 3) (2 2) (7 1)) ((4 7) (1 6) (5 5) (2 4) (6 3) (3 2) (7 1)) ((3 7) (6 6) (2 5) (5 4) (1 3) (4 2) (7 1)) ((2 7) (4 6) (6 5) (1 4) (3 3) (5 2) (7 1)))
(queens 8) ; (((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (5 2) (1 1)) ((5 8) (2 7) (4 6) (7 5) (3 4) (8 3) (6 2) (1 1)) ((3 8) (5 7) (2 6) (8 5) (6 4) (4 3) (7 2) (1 1)) ((3 8) (6 7) (4 6) (2 5) (8 4) (5 3) (7 2) (1 1)) ((5 8) (7 7) (1 6) (3 5) (8 4) (6 3) (4 2) (2 1)) ((4 8) (6 7) (8 6) (3 5) (1 4) (7 3) (5 2) (2 1)) ((3 8) (6 7) (8 6) (1 5) (4 4) (7 3) (5 2) (2 1)) ((5 8) (3 7) (8 6) (4 5) (7 4) (1 3) (6 2) (2 1)) ((5 8) (7 7) (4 6) (1 5) (3 4) (8 3) (6 2) (2 1)) ((4 8) (1 7) (5 6) (8 5) (6 4) (3 3) (7 2) (2 1)) ((3 8) (6 7) (4 6) (1 5) (8 4) (5 3) (7 2) (2 1)) ((4 8) (7 7) (5 6) (3 5) (1 4) (6 3) (8 2) (2 1)) ((6 8) (4 7) (2 6) (8 5) (5 4) (7 3) (1 2) (3 1)) ((6 8) (4 7) (7 6) (1 5) (8 4) (2 3) (5 2) (3 1)) ((1 8) (7 7) (4 6) (6 5) (8 4) (2 3) (5 2) (3 1)) ((6 8) (8 7) (2 6) (4 5) (1 4) (7 3) (5 2) (3 1)) ((6 8) (2 7) (7 6) (1 5) (4 4) (8 3) (5 2) (3 1)) ((4 8) (7 7) (1 6) (8 5) (5 4) (2 3) (6 2) (3 1)) ((5 8) (8 7) (4 6) (1 5) (7 4) (2 3) (6 2) (3 1)) ((4 8) (8 7) (1 6) (5 5) (7 4) (2 3) (6 2) (3 1)) ((2 8) (7 7) (5 6) (8 5) (1 4) (4 3) (6 2) (3 1)) ((1 8) (7 7) (5 6) (8 5) (2 4) (4 3) (6 2) (3 1)) ((2 8) (5 7) (7 6) (4 5) (1 4) (8 3) (6 2) (3 1)) ((4 8) (2 7) (7 6) (5 5) (1 4) (8 3) (6 2) (3 1)) ((5 8) (7 7) (1 6) (4 5) (2 4) (8 3) (6 2) (3 1)) ((6 8) (4 7) (1 6) (5 5) (8 4) (2 3) (7 2) (3 1)) ((5 8) (1 7) (4 6) (6 5) (8 4) (2 3) (7 2) (3 1)) ((5 8) (2 7) (6 6) (1 5) (7 4) (4 3) (8 2) (3 1)) ((6 8) (3 7) (7 6) (2 5) (8 4) (5 3) (1 2) (4 1)) ((2 8) (7 7) (3 6) (6 5) (8 4) (5 3) (1 2) (4 1)) ((7 8) (3 7) (1 6) (6 5) (8 4) (5 3) (2 2) (4 1)) ((5 8) (1 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1)) ((1 8) (5 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1)) ((3 8) (6 7) (8 6) (1 5) (5 4) (7 3) (2 2) (4 1)) ((6 8) (3 7) (1 6) (7 5) (5 4) (8 3) (2 2) (4 1)) ((7 8) (5 7) (3 6) (1 5) (6 4) (8 3) (2 2) (4 1)) ((7 8) (3 7) (8 6) (2 5) (5 4) (1 3) (6 2) (4 1)) ((5 8) (3 7) (1 6) (7 5) (2 4) (8 3) (6 2) (4 1)) ((2 8) (5 7) (7 6) (1 5) (3 4) (8 3) (6 2) (4 1)) ((3 8) (6 7) (2 6) (5 5) (8 4) (1 3) (7 2) (4 1)) ((6 8) (1 7) (5 6) (2 5) (8 4) (3 3) (7 2) (4 1)) ((8 8) (3 7) (1 6) (6 5) (2 4) (5 3) (7 2) (4 1)) ((2 8) (8 7) (6 6) (1 5) (3 4) (5 3) (7 2) (4 1)) ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (8 2) (4 1)) ((3 8) (6 7) (2 6) (7 5) (5 4) (1 3) (8 2) (4 1)) ((6 8) (2 7) (7 6) (1 5) (3 4) (5 3) (8 2) (4 1)) ((3 8) (7 7) (2 6) (8 5) (6 4) (4 3) (1 2) (5 1)) ((6 8) (3 7) (7 6) (2 5) (4 4) (8 3) (1 2) (5 1)) ((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (1 2) (5 1)) ((7 8) (1 7) (3 6) (8 5) (6 4) (4 3) (2 2) (5 1)) ((1 8) (6 7) (8 6) (3 5) (7 4) (4 3) (2 2) (5 1)) ((3 8) (8 7) (4 6) (7 5) (1 4) (6 3) (2 2) (5 1)) ((6 8) (3 7) (7 6) (4 5) (1 4) (8 3) (2 2) (5 1)) ((7 8) (4 7) (2 6) (8 5) (6 4) (1 3) (3 2) (5 1)) ((4 8) (6 7) (8 6) (2 5) (7 4) (1 3) (3 2) (5 1)) ((2 8) (6 7) (1 6) (7 5) (4 4) (8 3) (3 2) (5 1)) ((2 8) (4 7) (6 6) (8 5) (3 4) (1 3) (7 2) (5 1)) ((3 8) (6 7) (8 6) (2 5) (4 4) (1 3) (7 2) (5 1)) ((6 8) (3 7) (1 6) (8 5) (4 4) (2 3) (7 2) (5 1)) ((8 8) (4 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1)) ((4 8) (8 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1)) ((2 8) (6 7) (8 6) (3 5) (1 4) (4 3) (7 2) (5 1)) ((7 8) (2 7) (6 6) (3 5) (1 4) (4 3) (8 2) (5 1)) ((3 8) (6 7) (2 6) (7 5) (1 4) (4 3) (8 2) (5 1)) ((4 8) (7 7) (3 6) (8 5) (2 4) (5 3) (1 2) (6 1)) ((4 8) (8 7) (5 6) (3 5) (1 4) (7 3) (2 2) (6 1)) ((3 8) (5 7) (8 6) (4 5) (1 4) (7 3) (2 2) (6 1)) ((4 8) (2 7) (8 6) (5 5) (7 4) (1 3) (3 2) (6 1)) ((5 8) (7 7) (2 6) (4 5) (8 4) (1 3) (3 2) (6 1)) ((7 8) (4 7) (2 6) (5 5) (8 4) (1 3) (3 2) (6 1)) ((8 8) (2 7) (4 6) (1 5) (7 4) (5 3) (3 2) (6 1)) ((7 8) (2 7) (4 6) (1 5) (8 4) (5 3) (3 2) (6 1)) ((5 8) (1 7) (8 6) (4 5) (2 4) (7 3) (3 2) (6 1)) ((4 8) (1 7) (5 6) (8 5) (2 4) (7 3) (3 2) (6 1)) ((5 8) (2 7) (8 6) (1 5) (4 4) (7 3) (3 2) (6 1)) ((3 8) (7 7) (2 6) (8 5) (5 4) (1 3) (4 2) (6 1)) ((3 8) (1 7) (7 6) (5 5) (8 4) (2 3) (4 2) (6 1)) ((8 8) (2 7) (5 6) (3 5) (1 4) (7 3) (4 2) (6 1)) ((3 8) (5 7) (2 6) (8 5) (1 4) (7 3) (4 2) (6 1)) ((3 8) (5 7) (7 6) (1 5) (4 4) (2 3) (8 2) (6 1)) ((5 8) (2 7) (4 6) (6 5) (8 4) (3 3) (1 2) (7 1)) ((6 8) (3 7) (5 6) (8 5) (1 4) (4 3) (2 2) (7 1)) ((5 8) (8 7) (4 6) (1 5) (3 4) (6 3) (2 2) (7 1)) ((4 8) (2 7) (5 6) (8 5) (6 4) (1 3) (3 2) (7 1)) ((4 8) (6 7) (1 6) (5 5) (2 4) (8 3) (3 2) (7 1)) ((6 8) (3 7) (1 6) (8 5) (5 4) (2 3) (4 2) (7 1)) ((5 8) (3 7) (1 6) (6 5) (8 4) (2 3) (4 2) (7 1)) ((4 8) (2 7) (8 6) (6 5) (1 4) (3 3) (5 2) (7 1)) ((6 8) (3 7) (5 6) (7 5) (1 4) (4 3) (2 2) (8 1)) ((6 8) (4 7) (7 6) (1 5) (3 4) (5 3) (2 2) (8 1)) ((4 8) (7 7) (5 6) (2 5) (6 4) (1 3) (3 2) (8 1)) ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (4 2) (8 1)))